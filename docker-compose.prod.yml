version: "3.9"

services:
  backend:
    build: ./backend
    ports:
      - "8000:8000"
    env_file:
      - ./backend/.env.production
    environment:
      # Override specific values if needed
      - ENVIRONMENT=production
      - DEBUG=false
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.prod
    ports:
      - "80:80"  # Changed to port 80 for production with Nginx
    environment:
      - REACT_APP_API_URL=${FRONTEND_API_URL:-https://api.your-domain.com}
      - REACT_APP_WS_URL=${FRONTEND_WS_URL:-wss://api.your-domain.com}
    depends_on:
      - backend
    restart: unless-stopped

  db:
    build: ./DB
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${DATABASE_USER:-postgres}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_DB=${DATABASE_NAME:-kkua_prod}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups  # For database backups
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DATABASE_USER:-postgres}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # Production database migration service
  backend-migrate:
    build: ./backend
    env_file:
      - ./backend/.env.production
    environment:
      - ENVIRONMENT=production
    depends_on:
      db:
        condition: service_healthy
    command: python scripts/migrate.py upgrade
    restart: "no"  # Only run once for migrations

volumes:
  postgres_data:
  redis_data: