name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # 빠른 테스트를 위한 단순화된 CI
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: mysecretpassword
          POSTGRES_DB: mydb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    # Backend 테스트
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Backend Dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run Backend Tests
      env:
        DATABASE_URL: postgresql://postgres:mysecretpassword@localhost:5432/mydb
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        TESTING: true
        ENVIRONMENT: testing
      run: |
        cd backend
        python -m pytest tests/ -v --tb=short
    
    # Frontend 테스트
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install Frontend Dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run Frontend Tests
      run: |
        cd frontend
        npm test -- --watchAll=false --passWithNoTests
      env:
        CI: true

  # Docker 빌드 테스트 (선택적)
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' # push 시에만 실행
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Test Docker Build
      run: |
        docker-compose build --parallel